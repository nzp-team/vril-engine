name: Build
on: [push, pull_request]
jobs:
  Compile-EBOOT:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    container:
      image: pspdev/pspdev
    steps:
      - uses: actions/checkout@v2
      - name: Get container ready
        run: |
          apk add bash zip git gmp mpc1 mpfr4 make
      - name: Build
        working-directory: ./
        run: |
          psp-pacman -Sy libpspmath --noconfirm
          make -f Makefile.psp WERROR=1
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: psp-nzp-eboot
          path: ./build/psp/bin/EBOOT.PBP
  Compile-3DSX:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      o3ds_link: ${{ steps.zip.outputs.zip }}
    container:
      image: devkitpro/devkitarm
    steps:
      - uses: actions/checkout@v2
      - name: Install Packages and update picaGL
        run: |
          git clone https://github.com/masterfeizz/picaGL.git
          cd picaGL
          git checkout revamp
          mkdir clean
          make install
      - name: Build
        working-directory: ./
        run: |
          make -f Makefile.ctr WERROR=1
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ctr-nzp-3dsx
          path: ./build/3ds/bin/nzportable.3dsx
  Compile-TNS:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    container:
      image: bensuperpc/ndless:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build with Ndless SDK
        working-directory: ./
        run: |
          apt update && apt install -y git
          make -f Makefile.nspire WERROR=1
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nspire-nzp-tns
          path: ./build/nspire/bin/nzportable.tns
  Pull-Request-Test-PSP1000:
    if: github.event_name == 'pull_request'
    name: PSP-1000 Pull Request Tests
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.10
      options: --shm-size=8192m
    needs: [Compile-EBOOT, Compile-3DSX, Compile-TNS]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Wait for GitHub to keep up..
        run: sleep 2s
        shell: bash
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /
      - name: Run All
        run: |
          cd ./testing
          ./run_tests.sh --platform psp --test all --content "$(pwd)/validate" --mode fat
  Pull-Request-Test-PSP2000:
    if: github.event_name == 'pull_request'
    name: PSP-2000 Pull Request Tests
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.10
      options: --shm-size=8192m
    needs: [Compile-EBOOT, Compile-3DSX, Compile-TNS]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Wait for GitHub to keep up..
        run: sleep 2s
        shell: bash
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /
      - name: Run All
        run: |
          cd ./testing
          ./run_tests.sh --platform psp --test all --content "$(pwd)/validate" --mode slim
  Unify-and-Release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [Compile-EBOOT, Compile-3DSX, Compile-TNS]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Wait for GitHub to keep up..
        run: sleep 2s
        shell: bash
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./
      - name: Turn Artifacts into .ZIP archives
        run: |
          zip -r -j psp-nzp-eboot.zip psp-nzp-eboot/*
          zip -r -j ctr-nzp-3dsx.zip ctr-nzp-3dsx/*
          zip -r -j nspire-nzp-tns.zip nspire-nzp-tns/*
      - name: Generate Build Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M-%S')"
      - name: Delete Old Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: bleeding-edge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: bleeding-edge
          release_name: Automated Release ${{ steps.date.outputs.date }}
          body: |
            This is a **bleeding edge** NZ:P PSP/3DS/NSPIRE release, stability is not guarenteed.

            To install:
            - Grab the .ZIP archive for your platform
            - PSP: Extract the `EBOOT.PBP` to `/PSP/GAME/nzportable/`
            - 3DS: Extract `nzportable.3dsx` to `/3ds/nzportable/`.
            - NSPIRE: Sync `nzportable.tns` to `/`.
          draft: true
          prerelease: false
      - name: Upload PSP Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./psp-nzp-eboot.zip
          asset_name: psp-nzp-eboot.zip
          asset_content_type: application/zip
      - name: Upload 3DS Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ctr-nzp-3dsx.zip
          asset_name: ctr-nzp-3dsx.zip
          asset_content_type: application/zip
      - name: Upload NSPIRE Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./nspire-nzp-tns.zip
          asset_name: nspire-nzp-tns.zip
          asset_content_type: application/zip
      - name: Publish Release
        uses: StuYarrow/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ steps.create_release.outputs.id }}
